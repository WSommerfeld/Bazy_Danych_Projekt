<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="test1.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="0"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="1629"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><table title="Availability" custom_title="0" dock_id="1" table="4,12:mainAvailability"/><dock_state state="000000ff00000000fd00000001000000020000000000000000fc0100000001fb000000160064006f0063006b00420072006f00770073006500310100000000ffffffff0000012400ffffff000000000000000000000004000000040000000800000008fc00000000"/><default_encoding codec=""/><browse_table_settings/></tab_browse><tab_sql><sql name="SQL 1*">-- STEP 1: Create a new table for Models and update references
CREATE TABLE Models (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name VARCHAR(100) NOT NULL,
    type VARCHAR(20) NOT NULL CHECK (type IN ('Type1', 'Type2', 'Type3'))
);

-- Recreate Robots table to include foreign key
CREATE TABLE Robots_new (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    model_id INTEGER,
    type VARCHAR(50),
    serial_number VARCHAR(100),
    warranty_number VARCHAR(100),
    FOREIGN KEY (model_id) REFERENCES Models(id)
);

INSERT INTO Robots_new (id, model_id, type, serial_number, warranty_number)
SELECT id, NULL, type, serial_number, warranty_number FROM Robots;

DROP TABLE Robots;
ALTER TABLE Robots_new RENAME TO Robots;

-- Recreate Offers table to include foreign key
CREATE TABLE Offers_new (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    model_id INTEGER,
    available_quantity INTEGER,
    type VARCHAR(20) CHECK (type IN ('Type1', 'Type2', 'Type3')),
    rental_price DECIMAL,
    FOREIGN KEY (model_id) REFERENCES Models(id)
);

INSERT INTO Offers_new (id, model_id, available_quantity, type, rental_price)
SELECT id, NULL, available_quantity, type, rental_price FROM Offers;

DROP TABLE Offers;
ALTER TABLE Offers_new RENAME TO Offers;

-- Recreate Functionalities table to include foreign key
CREATE TABLE Functionalities_new (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    model_id INTEGER,
    name VARCHAR(100),
    FOREIGN KEY (model_id) REFERENCES Models(id)
);

INSERT INTO Functionalities_new (id, model_id, name)
SELECT id, NULL, functionality FROM Functionalities;

DROP TABLE Functionalities;
ALTER TABLE Functionalities_new RENAME TO Functionalities;

-- STEP 2: Update Availability.status to use CHECK constraint
CREATE TABLE Availability_new (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    robot_id INTEGER,
    status VARCHAR(20) CHECK (status IN ('Available', 'Reserved', 'OutOfService')),
    end_date DATE,
    price DECIMAL,
    FOREIGN KEY (robot_id) REFERENCES Robots(id)
);

INSERT INTO Availability_new (id, robot_id, status, end_date, price)
SELECT id, robot_id, status, end_date, price FROM Availability;

DROP TABLE Availability;
ALTER TABLE Availability_new RENAME TO Availability;

-- STEP 3: Rename Functionalities.functionality to Functionalities.name
-- Already done during recreation of Functionalities table

-- STEP 4: Standardize primary key column names
-- Already standardized during recreation of tables

-- STEP 5: Remove redundant columns from Reservations
CREATE TABLE Reservations_new (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    customer_login VARCHAR(100),
    payment_status VARCHAR(50),
    robot_id INTEGER,
    start_date DATE,
    end_date DATE,
    income DECIMAL,
    FOREIGN KEY (customer_login) REFERENCES Users(user_login),
    FOREIGN KEY (robot_id) REFERENCES Robots(id)
);

INSERT INTO Reservations_new (id, customer_login, payment_status, robot_id, start_date, end_date, income)
SELECT id, customer_login, payment_status, robot_id, start_date, end_date, income FROM Reservations;

DROP TABLE Reservations;
ALTER TABLE Reservations_new RENAME TO Reservations;

-- STEP 7: Add roles to Users
ALTER TABLE Users ADD COLUMN role VARCHAR(50);
</sql><current_tab id="0"/></tab_sql></sqlb_project>
